https://www.codewars.com/kata/5340298112fa30e786000688/java


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.tito;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;

/**
 *
 * @author Usuario
 */
public class NewMain {

    
   
    static int partition(int arr[], int low, int high) 
    { 
        int pivot = arr[high]; 
  
        // index of smaller element 
        int i = (low - 1); 
        for (int j = low; j <= high - 1; j++) { 
            // If current element is smaller than or 
            // equal to pivot 
            if (arr[j] <= pivot) { 
                i++; 
  
                // swap arr[i] and arr[j] 
                int temp = arr[i]; 
                arr[i] = arr[j]; 
                arr[j] = temp; 
            } 
        } 
  
        // swap arr[i+1] and arr[high] (or pivot) 
        int temp = arr[i + 1]; 
        arr[i + 1] = arr[high]; 
        arr[high] = temp; 
  
        return i + 1; 
    } 
  
    /* A[] --> Array to be sorted,  
   l  --> Starting index,  
   h  --> Ending index */
    static void quickSortIterative(int arr[], int l, int h) 
    { 
        // Create an auxiliary stack 
        int[] stack = new int[h - l + 1]; 
  
        // initialize top of stack 
        int top = -1; 
  
        // push initial values of l and h to stack 
        stack[++top] = l; 
        stack[++top] = h; 
  
        // Keep popping from stack while is not empty 
        while (top >= 0) { 
            // Pop h and l 
            h = stack[top--]; 
            l = stack[top--]; 
  
            // Set pivot element at its correct position 
            // in sorted array 
            int p = partition(arr, l, h); 
  
            // If there are elements on left side of pivot, 
            // then push left side to stack 
            if (p - 1 > l) { 
                stack[++top] = l; 
                stack[++top] = p - 1; 
            } 
  
            // If there are elements on right side of pivot, 
            // then push right side to stack 
            if (p + 1 < h) { 
                stack[++top] = p + 1; 
                stack[++top] = h; 
            } 
        } 
    } 
    
  public static int[][] twosDifference(int[] array) {
    
    //List<Tuple<int, int>> ans = new List<Tuple<int, int>>();
    if(array == null || array.length == 0) {
        return new int[0][0];
    }
    
    quickSortIterative (array,0,array.length-1);
    
    HashSet<Integer> hash = new HashSet();
    
    for(int i =0; i<array.length; i++) {
        hash.add(array[i]);
    }
    
    ArrayList<int[]> ans = new ArrayList();
    int[] aux = new int[2];
    for (int i = 0; i < array.length; i++)
    {
        if (hash.contains(array[i] + 2))
        {
            //ans.add(new Tuple<int, int>(array[i], array[i] + 2));
            aux[0] = array[i];
            aux[1] = array[i] + 2;
            ans.add(aux);
            aux = new int[2];
        }
    }

    int[][] r = new int[ans.size()][2];
    
    
    
    for(int i =0; i< ans.size(); i++) {
        r[i][0] = ans.get(i)[0];
        r[i][1] = ans.get(i)[1];
    }
    
    return r;
    
  }
    
    public static void main(String[] args) throws IOException {
        
      
        int[][] r = twosDifference(new int[]{4, 3, 1, 5, 6});
        
        for(int i =0; i<r.length; i++) {
            
                System.out.print(r[i][0] + " " + r[i][1] );
            
            System.out.println();
        }
        
       

    }

    
}
