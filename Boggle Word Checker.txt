https://www.codewars.com/kata/57680d0128ed87c94f000bfd/train/cpp

----ACEPTADO--------
from heapq import heappop, heappush

STEPS = (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)


def find_word(board, word):
    queue = [
        (word[1:], (i, j), {(i, j)})
        for i, w in enumerate(board) for j, c in enumerate(w)
        if c == word[0]
    ]

    while queue:
        w, (x, y), visited = heappop(queue)

        if not w:
            return True

        for x_step, y_step in STEPS:
            xx, yy = pos = x + x_step, y + y_step

            if pos not in visited and len(board) > xx >= 0 and len(board[0]) > yy >= 0 and board[xx][yy] == w[0]:
                heappush(queue, (w[1:], pos, visited | {pos}))

    return False




------------NO PASA TODOS LOS TEST -----------------------
def printScreen(screen):

    for i in range(0, len(screen)):
        print(screen[i])

    print("\n")

# Function that returns true if  
# the given pixel is valid 
def isValid(screen, m, n, x, y, prevC, newC, k, word): 
    #if x<0 or x>= m or y<0 or y>= n or screen[x][y]!= prevC or screen[x][y]== newC: 
    if x<0 or x>= m or y<0 or y>= n or screen[x][y] != word[k]: 
         return False
    return True
  
  
# FloodFill function 
def floodFill(screen,   
            m, n, x,   
            y, prevC, newC, k, word): 
    queue = [] 
      
    # Append the position of starting  
    # pixel of the component 
    queue.append([x, y]) 

    newC = word[k].lower()
  
    # Color the pixel with the new color 
    screen[x][y] = newC 
    k+=1
  
    # While the queue is not empty i.e. the  
    # whole component having prevC color  
    # is not colored with newC color 

    encontro = False

    while queue: 
        
        if k >= len(word):
            return True
        
        newC = word[k].lower()
        # Dequeue the front node 
        currPixel = queue.pop() 
          
        posX = currPixel[0] 
        posY = currPixel[1] 
          
        # Check if the adjacent 
        # pixels are valid 
        if isValid(screen, m, n,  posX + 1, posY,  prevC, newC, k, word): 
            screen[posX + 1][posY] = newC 
            queue.append([posX + 1, posY]) 
            encontro = True
          
        if isValid(screen, m, n, posX-1, posY,  prevC, newC, k, word): 
            screen[posX - 1][posY]= newC 
            queue.append([posX-1, posY]) 
            encontro = True
          
        if isValid(screen, m, n, posX, posY + 1, prevC, newC, k, word): 
            screen[posX][posY + 1]= newC 
            queue.append([posX, posY + 1]) 
            encontro = True

          
        if isValid(screen, m, n,  posX, posY-1, prevC, newC, k, word): 
            screen[posX][posY - 1]= newC 
            queue.append([posX, posY-1]) 
            encontro = True

        #---
        if isValid(screen, m, n,  posX-1, posY-1, prevC, newC, k, word): 
            screen[posX-1][posY - 1]= newC 
            queue.append([posX-1, posY-1]) 
            encontro = True

        if isValid(screen, m, n,  posX + 1, posY  + 1, prevC, newC, k, word): 
            screen[posX + 1][posY + 1]= newC 
            queue.append([posX + 1, posY + 1]) 
            encontro = True

        if isValid(screen, m, n,  posX-1, posY+1, prevC, newC, k, word): 
            screen[posX-1][posY + 1]= newC 
            queue.append([posX-1, posY+1]) 
            encontro = True

        if isValid(screen, m, n,  posX+1, posY-1, prevC, newC, k, word): 
            screen[posX+1][posY - 1]= newC 
            queue.append([posX+1, posY-1]) 
            encontro = True

        #printScreen(screen)


        
        if encontro:
            k+=1

        if k >= len(word):
            return True

        encontro = False

    return False


def copiarTablero(origen):

    r = []
    for i in range(0, len (origen)):
        fila = []
        for j in range(0, len(origen[i])):
            fila.append(origen[i][j])
        r.append(fila)
    return r



def find_word(board, word):
    # write your code here

    copiaTablero = copiarTablero(board)

    # Row of the display 
    m = len(board) 
  
    # Column of the display 
    n = len(board[0]) 
  
    # Co-ordinate provided by the user 
    x = 0
    y = 1
  
    # Current colour at that co-ordinate 
    prevC = board[x][y] 
  
    # New colour that has to be filled 
    #newC = 3

    k = 0

    
    for i in range(0, len(board)):
        for j in range(0, len(board[i])):

            if board[i][j] == word[0]:
                #pass
                if floodFill(board,m, n,i,j,board[i][j], board[i][j].lower(), k, word):
                    return True
            board = copiarTablero(copiaTablero)


    return False


if __name__ == "__main__":
    #print("FUNCIONAR√Å")

    #testBoard = [
    #  ['O','H','O','L'],
    #  ['-','O','X','A'],
    #  ['-','-','A','-'],
    #  ['-','-','-','-'],
    #]

    #word = ['H','O','L','A']

    testBoard = [
      ["E","A","R","A"],
      ["N","L","E","C"],
      ["I","A","I","S"],
      ["B","Y","O","R"]
    ]


    #word = "BAILER"   
    word = 'RSCAREIOYBAILNEA'
    
    print(find_word(testBoard, word))









----------------------------------------------------------------------------

#k = 0

# Python3 implementation of the approach 
  
# Function that returns true if  
# the given pixel is valid 
def isValid(screen, m, n, x, y, prevC, newC, k): 
    #if x<0 or x>= m or y<0 or y>= n or screen[x][y]!= prevC or screen[x][y]== newC: 
    if x<0 or x>= m or y<0 or y>= n or screen[x][y] != word[k]: 
         return False
    return True
  
  
# FloodFill function 
def floodFill(screen,   
            m, n, x,   
            y, prevC, newC, k): 
    queue = [] 
      
    # Append the position of starting  
    # pixel of the component 
    queue.append([x, y]) 

    newC = word[k].lower()
  
    # Color the pixel with the new color 
    screen[x][y] = newC 
    k+=1
  
    # While the queue is not empty i.e. the  
    # whole component having prevC color  
    # is not colored with newC color 

    encontro = False

    while queue: 
        newC = word[k].lower()
        # Dequeue the front node 
        currPixel = queue.pop() 
          
        posX = currPixel[0] 
        posY = currPixel[1] 
          
        # Check if the adjacent 
        # pixels are valid 
        if isValid(screen, m, n,   
                posX + 1, posY,   
                        prevC, newC, k): 
              
            # Color with newC 
            # if valid and enqueue 
            screen[posX + 1][posY] = newC 
            queue.append([posX + 1, posY]) 

            #newC = word[k]
            #if k + 1 < len(word):
            #    k+=1

            encontro = True
          
        if isValid(screen, m, n,   
                    posX-1, posY,   
                        prevC, newC, k): 
            screen[posX-1][posY]= newC 
            queue.append([posX-1, posY]) 

            #newC = word[k]
            #if k + 1 < len(word):
            #    k+=1

            encontro = True
          
        if isValid(screen, m, n,   
                posX, posY + 1,   
                        prevC, newC, k): 
            screen[posX][posY + 1]= newC 
            queue.append([posX, posY + 1]) 

            #newC = word[k]
            #if k + 1 < len(word):
            #    k+=1
            encontro = True

          
        if isValid(screen, m, n,   
                    posX, posY-1,   
                        prevC, newC, k): 
            screen[posX][posY-1]= newC 
            queue.append([posX, posY-1]) 

            #newC = word[k]
            #if k + 1 < len(word):
            #    k+=1
            encontro = True
        
        if encontro and k + 1 < len(word):
            k+=1

        if k >= len(word)-1:
            return True

        encontro = False

    return False


def find_word(board, word):
    # write your code here

    # Row of the display 
    m = len(board) 
  
    # Column of the display 
    n = len(board[0]) 
  
    # Co-ordinate provided by the user 
    x = 0
    y = 1
  
    # Current colour at that co-ordinate 
    prevC = screen[x][y] 
  
    # New colour that has to be filled 
    #newC = 3

    k = 0

    
    for i in range(0, len(board)):
        for j in range(0, len(board[i])):

            if board[i][j] == word[0]:
                #pass
               if  floodFill(board,m, n,i,j,board[i][j], board[i][j].lower(), k):
                   return True
    return False


screen = [
      ['O','H','O','L'],
      ['-','O','X','A'],
      ['-','-','A','-'],
      ['-','-','-','-'],
]

word = ['H','O','L','A']
  
print(find_word(screen, word))




#screen =[ 
#[1, 1, 1, 1, 1, 1, 1, 1],  
#[1, 1, 1, 1, 1, 1, 0, 0],  
#[1, 0, 0, 1, 1, 0, 1, 1],  
#[1, 2, 2, 2, 2, 0, 1, 0],  
#[1, 1, 1, 2, 2, 0, 1, 0],  
#[1, 1, 1, 2, 2, 2, 2, 0],  
#[1, 1, 1, 1, 1, 2, 1, 1],  
#[1, 1, 1, 1, 1, 2, 2, 1],  
#    ] 



      
## Row of the display 
#m = len(screen) 
  
## Column of the display 
#n = len(screen[0]) 
  
## Co-ordinate provided by the user 
#x = 0
#y = 1
  
## Current colour at that co-ordinate 
#prevC = screen[x][y] 
  
## New colour that has to be filled 
#newC = 3
  
#floodFill(screen, m, n, x, y, prevC, newC, k) 
  
  
## Priting the updated screen 
#for i in range(m): 
#    for j in range(n): 
#        print(screen[i][j], end =' ') 
#    print() 

